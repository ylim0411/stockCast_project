<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Orders">

    <!--  페이징 전체 조회  -->
    <select id="pagingList" parameterType="map" resultType="OrderStmt">
        <![CDATA[
        SELECT
          os.orderId AS orderId,
          os.orderDate AS orderDate,
          c.clientName AS clientName,
          IFNULL(SUM(po.purchaseQty), 0) AS totalCount,
          IFNULL(SUM(po.purchaseQty * po.purchasePrice), 0) AS totalPrice,
          os.status,
          os.orderSubnum
        FROM orderStmt os
        JOIN client c ON os.clientId = c.clientId
        LEFT JOIN purchaseOrder po ON os.orderId = po.orderId
        WHERE os.storeId = #{storeId}
        GROUP BY os.orderId, os.orderDate, c.clientName
        ORDER BY os.orderId DESC
        LIMIT #{start}, #{limit}
        ]]>
    </select>

    <!-- 페이징 수 -->
    <select id="orderCount" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM orderStmt
        WHERE storeId = #{_parameter}
    </select>

    <!-- 달력 검색 + 페이징 -->
    <select id="findByDatePaging" parameterType="map" resultType="OrderStmt">
        <![CDATA[
        SELECT
          os.orderId AS orderId,
          os.orderDate AS orderDate,
          c.clientName AS clientName,
          SUM(po.purchaseQty) AS totalCount,
          SUM(po.purchaseQty * po.purchasePrice) AS totalPrice,
          os.status,
          os.orderSubnum
        FROM orderStmt os
        JOIN client c ON os.clientId = c.clientId
        JOIN purchaseOrder po ON os.orderId = po.orderId
        WHERE os.storeId = #{storeId}
          AND os.orderDate >= #{startDate}
          AND os.orderDate <  #{endDate}
        GROUP BY os.orderId, os.orderDate, c.clientName
        ORDER BY os.orderId DESC
        LIMIT #{start}, #{limit}
        ]]>
    </select>

    <!--  총 개수  -->
    <select id="countByDate" parameterType="map" resultType="int">
        <![CDATA[
        SELECT COUNT(DISTINCT os.orderId)
        FROM orderStmt os
        WHERE os.storeId = #{storeId}
          AND os.orderDate >= #{startDate}
          AND os.orderDate <  #{endDate}
        ]]>
    </select>

    <!-- 발주번호 검색 + 페이징 -->
    <select id="findByNoPaging" parameterType="map" resultType="OrderStmt">
        <![CDATA[
        SELECT
          os.orderId AS orderId,
          os.orderDate AS orderDate,
          c.clientName AS clientName,
          SUM(po.purchaseQty) AS totalCount,
          SUM(po.purchaseQty * po.purchasePrice) AS totalPrice,
          os.status,
          os.orderSubnum
        FROM orderStmt os
        JOIN client c ON os.clientId = c.clientId
        JOIN purchaseOrder po ON os.orderId = po.orderId
        WHERE os.storeId = #{storeId}
          AND os.orderSubnum LIKE CONCAT('%', #{orderStmtId}, '%')
        GROUP BY os.orderId, os.orderDate, c.clientName
        ORDER BY os.orderSubnum DESC
        LIMIT #{start}, #{limit}
        ]]>
    </select>

    <!--  총 개수  -->
    <select id="countByNo" parameterType="map" resultType="int">
        <![CDATA[
        SELECT COUNT(DISTINCT os.orderSubnum)
        FROM orderStmt os
        WHERE os.storeId = #{storeId}
          AND os.orderSubnum LIKE CONCAT('%', #{orderStmtId}, '%')
        ]]>
    </select>


    <!-- 마지막 발주 서브 조회 -->
    <select id="getLastOrderId" parameterType="Integer" resultType="int">
        SELECT IFNULL(MAX(orderSubnum), 0) FROM orderStmt
        WHERE storeId = #{storeId}
    </select>
    <!-- 마지막 발주 ID 조회 -->
    <select id="findLastOrderId" resultType="int">
        SELECT IFNULL(MAX(orderId), 0) FROM orderStmt
    </select>
    <!-- 발주서 저장 -->
    <insert id="insertOrder" parameterType="map">
        INSERT INTO orderStmt (storeId, orderSubnum, clientId, orderDate)
        SELECT #{storeId}, #{orderSubnum}, c.clientId, #{orderDate}
        FROM client c
        WHERE c.clientId = #{clientId}
        AND c.storeId  = #{storeId}
    </insert>

    <!-- 발주 상세 조회 -->
    <select id="findById" parameterType="map" resultType="OrderStmt">
        SELECT
        os.orderId,
        os.orderDate,
        os.status,
        c.clientId,
        c.clientName,
        os.orderSubnum,
        IFNULL(SUM(po.purchaseQty), 0) AS totalCount,
        IFNULL(SUM(po.purchaseQty * po.purchasePrice), 0) AS totalPrice
        FROM orderStmt os
        JOIN client c ON os.clientId = c.clientId
        LEFT JOIN purchaseOrder po ON os.orderId = po.orderId
        WHERE os.storeId = #{storeId}
        AND os.orderId = #{orderId}
        GROUP BY os.orderId, os.orderDate, os.status, c.clientId, c.clientName
    </select>

    <!-- 발주 수정 -->
    <update id="updateOrder" parameterType="map">
        UPDATE orderStmt os
        JOIN client c
        ON c.clientId = #{clientId}
        AND c.storeId  = #{storeId}
        SET os.clientId = c.clientId,
        os.orderDate = #{orderDate}
        WHERE os.storeId = #{storeId}
        AND os.orderId = #{orderId}
    </update>

    <!-- 발주 삭제 -->
    <delete id="deleteOrder" parameterType="map">
        DELETE FROM orderStmt
        WHERE storeId = #{storeId}
        AND orderId = #{orderId}
    </delete>

    <!-- 발주 상태값 바꾸기 ho -->
    <update id="updateStatus" parameterType="map">
        UPDATE orderStmt
        SET status = #{status}
        WHERE storeId = #{storeId}
        AND orderId = #{orderId}
    </update>

    <!-- 이번달 발주내역 불러오기 ho -->
    <select id="findByMonth" parameterType="string" resultType="OrderStmt">
        SELECT o.orderDate,
        p.purchasePrice AS totalPrice,
        p.purchaseQty   AS totalCount
        FROM orderStmt o
        JOIN purchaseOrder p ON p.orderId = o.orderId
        WHERE SUBSTR(o.orderDate, 1, 7) = #{currentMonth}
        AND o.storeId = #{storeId}
    </select>

</mapper>
