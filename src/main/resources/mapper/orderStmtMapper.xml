<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Orders">

    <!--  페이징 전체 조회  -->
    <select id="pagingList" parameterType="map" resultType="OrderStmt">
        <![CDATA[
        SELECT
            os.orderId AS orderId,
            os.orderDate AS orderDate,
            c.clientName AS clientName,
            IFNULL(SUM(po.purchaseQty), 0) AS totalCount,
            IFNULL(SUM(po.purchaseQty * po.purchasePrice), 0) AS totalPrice,
            os.status
        FROM orderStmt os
        JOIN client c ON os.clientId = c.clientId
        LEFT JOIN purchaseOrder po ON os.orderId = po.orderId
        GROUP BY os.orderId, os.orderDate, c.clientName
        ORDER BY os.orderId DESC
        LIMIT #{start}, #{limit}
        ]]>
    </select>

    <!-- 페이징 수 -->
    <select id="orderCount" resultType="int">
        SELECT COUNT(DISTINCT os.orderId)
        FROM orderStmt os
        JOIN purchaseOrder po ON os.orderId = po.orderId
    </select>

    <!-- 달력 검색 + 페이징 -->
    <select id="findByDatePaging" parameterType="map" resultType="OrderStmt">
        <![CDATA[
        SELECT
            os.orderId AS orderId,
            os.orderDate AS orderDate,
            c.clientName AS clientName,
            SUM(po.purchaseQty) AS totalCount,
            SUM(po.purchaseQty * po.purchasePrice) AS totalPrice,
            os.status
        FROM orderStmt os
        JOIN client c ON os.clientId = c.clientId
        JOIN purchaseOrder po ON os.orderId = po.orderId
        WHERE os.orderDate >= #{startDate}
          AND os.orderDate < #{endDate}
        GROUP BY os.orderId, os.orderDate, c.clientName
        ORDER BY os.orderId DESC
        LIMIT #{start}, #{limit}
        ]]>
    </select>

    <!--  총 개수  -->
    <select id="countByDate" parameterType="map" resultType="int">
        <![CDATA[
        SELECT COUNT(DISTINCT os.orderId)
        FROM orderStmt os
        WHERE os.orderDate >= #{startDate}
        AND os.orderDate < #{endDate}
        ]]>
    </select>

    <!-- 발주번호 검색 + 페이징 -->
    <select id="findByNoPaging" parameterType="map" resultType="OrderStmt">
        <![CDATA[
        SELECT
            os.orderId AS orderId,
            os.orderDate AS orderDate,
            c.clientName AS clientName,
            SUM(po.purchaseQty) AS totalCount,
            SUM(po.purchaseQty * po.purchasePrice) AS totalPrice,
            os.status
        FROM orderStmt os
        JOIN client c ON os.clientId = c.clientId
        JOIN purchaseOrder po ON os.orderId = po.orderId
        WHERE os.orderId LIKE CONCAT('%', #{orderStmtId}, '%')
        GROUP BY os.orderId, os.orderDate, c.clientName
        ORDER BY os.orderId DESC
        LIMIT #{start}, #{limit}
        ]]>
    </select>

    <!--  총 개수  -->
    <select id="countByNo" parameterType="string" resultType="int">
        SELECT COUNT(DISTINCT os.orderId)
        FROM orderStmt os
        WHERE os.orderId LIKE CONCAT('%', #{orderStmtId}, '%')
    </select>


    <!-- 마지막 발주 ID 조회 -->
    <select id="getLastOrderId" resultType="int">
        SELECT IFNULL(MAX(orderId), 0) FROM orderStmt
    </select>

    <!-- 발주서 저장 -->
    <insert id="insertOrder" parameterType="map">
        INSERT INTO orderStmt (orderId, clientId, orderDate)
        VALUES (#{orderId}, #{clientId}, #{orderDate})
    </insert>

    <!-- 발주 상세 조회 -->
    <select id="findById" parameterType="int" resultType="OrderStmt">
        <![CDATA[
        SELECT
            os.orderId,
            os.orderDate,
            c.clientId,
            c.clientName,
            IFNULL(SUM(po.purchaseQty), 0) AS totalCount,
            IFNULL(SUM(po.purchaseQty * po.purchasePrice), 0) AS totalPrice,
            CASE
                WHEN DATE_ADD(os.orderDate, INTERVAL 3 DAY) < CURDATE() THEN '완료'
                ELSE '진행중'
            END AS status
        FROM orderStmt os
        JOIN client c ON os.clientId = c.clientId
        LEFT JOIN purchaseOrder po ON os.orderId = po.orderId
        WHERE os.orderId = #{orderId}
        GROUP BY os.orderId, os.orderDate, c.clientId, c.clientName
        ]]>
    </select>

    <!-- 발주 수정 -->
    <update id="updateOrder" parameterType="map">
        UPDATE orderStmt
        SET clientId = #{clientId},
        orderDate = #{orderDate}
        WHERE orderId = #{orderId}
    </update>

    <!-- 발주 삭제 -->
    <delete id="deleteOrder" parameterType="int">
        DELETE FROM orderStmt
        WHERE orderId = #{orderId}
    </delete>
    <!-- 발주 상태값 바꾸기 ho -->
    <update id="updateStatus" parameterType="map">
        UPDATE  orderstmt SET status = #{status}
        WHERE orderId = #{id};
    </update>
    <!-- 이번달 발주내역 불러오기 ho -->
    <select id="findByMonth" parameterType="String" resultType="OrderStmt">
        SELECT o.orderDate, p.purchasePrice as totalPrice, p.purchaseQty as totalCount  FROM orderstmt o
        JOIN purchaseorder p ON p.orderId = o.orderId
        WHERE SUBSTR(orderDate,6,2) = #{currentMonth}
    </select>
</mapper>
