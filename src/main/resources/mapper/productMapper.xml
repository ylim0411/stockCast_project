<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Product">

    <resultMap id="productMap" type="map">
        <result property="productId" column="productId"/>
        <result property="productName" column="productName"/>
        <result property="price" column="price"/>
    </resultMap>

    <!-- clientId로 상품 조회 -->
    <select id="findByClientId" parameterType="int" resultType="map">
        SELECT
        p.productId AS "productId",
        p.price AS "price",
        p.productName AS "productName"
        FROM client_product cp
        JOIN product p ON cp.productId = p.productId
        WHERE cp.clientId = #{clientId}
        ORDER BY p.productName
    </select>

    <!-- 상품 삭제 -->
    <delete id="deleteProduct" parameterType="int">
        DELETE FROM product
        WHERE productId = #{id}
    </delete>

    <!-- 전체 상품 목록 -->
    <select id="getAllProducts" resultType="map">
        SELECT
        productId,
        productName,
        price
        FROM product
        ORDER BY productName ASC
    </select>

    <select id="selectProductsByCategoryId" parameterType="int" resultType="Product">
        SELECT * FROM product WHERE categoryId = #{categoryId};
    </select>

    <select id="findProductList" resultType="Product">
        SELECT * FROM product;
    </select>

    <update id="update" parameterType="Product">
        UPDATE product SET productName = #{productName}, price = #{price}, stockQuantity = #{stockQuantity}, categoryId = #{categoryId}
        WHERE productId = #{productId};
    </update>

    <insert id="add" parameterType="Product">
        INSERT INTO product (categoryId, productName, price, stockQuantity)
        VALUES (#{categoryId}, #{productName}, #{price}, #{stockQuantity});
    </insert>

    <select id="findProductByName" parameterType="String" resultType="Product">
        SELECT * FROM product WHERE productName LIKE #{productName};
    </select>

    <!-- 발주 카테고리별 상품 조회 young -->
    <select id="findTopCategoriesByClient" resultType="ProductCategory">
        SELECT DISTINCT pc.categoryId,
        pc.categoryName,
        pc.parentId,
        pc.categoryLevel
        FROM productCategory pc
        INNER JOIN product p ON p.categoryId = pc.categoryId
        INNER JOIN client c ON c.clientId = p.clientId
        WHERE pc.categoryLevel = 1
        AND c.clientId = #{clientId}
        ORDER BY pc.categoryName ASC
    </select>

    <select id="findSubCategoriesByParent" resultType="ProductCategory">
        SELECT DISTINCT pc.categoryId,
        pc.categoryName,
        pc.parentId,
        pc.categoryLevel
        FROM productCategory pc
        INNER JOIN product p ON p.categoryId = pc.categoryId
        INNER JOIN client c ON c.clientId = p.clientId
        WHERE pc.parentId = #{parentId}
        AND c.clientId = #{clientId}
        ORDER BY pc.categoryName ASC
    </select>

    <!-- 카테고리별 상품 조회 young -->
    <select id="findByCategoryId" parameterType="int" resultType="Product">
        SELECT
        p.productId AS productId,
        p.productName AS productName,
        p.price,
        p.stockQuantity AS stockQuantity,
        p.categoryId AS categoryId
        FROM product p
        WHERE p.categoryId = #{categoryId}
        ORDER BY p.productName
    </select>

    <select id="stockQuantityList" resultType="StockQuantity">
        SELECT * FROM product_summary_view;
    </select>

    <select id="findStockQuantityByKeyword" parameterType="String" resultType="StockQuantity">
        SELECT *
        FROM product_summary_view
        WHERE topLevelCategoryName LIKE #{keyword}
        OR categoryName LIKE #{keyword}
        OR productName LIKE #{keyword}
    </select>

    <insert id="addCategory" parameterType="Product">
        INSERT INTO product (storeId, categoryId, productName, price, stockQuantity)
        VALUES (#{storeId}, #{categoryId}, #{productName}, #{price}, #{stockQuantity});
    </insert>

    <select id="findProductsByCategoryId" parameterType="int" resultType="StockQuantity">
        SELECT * FROM product WHERE categoryId = #{parentId};
    </select>
    <update id="updateOrder" parameterType="map">
        UPDATE product SET stockQuantity = stockQuantity+#{purchaseQty}
        WHERE productId = #{productId};
    </update>

    <!-- 모달창 카테고리명 수정 -->
    <update id="updateProductName" parameterType="map">
        UPDATE product
        SET productName = #{newName}
        WHERE productId = #{productId};
    </update>

<!--    <select id="stockList" parameterType="map" resultType="StockQuantityDTO">-->
<!--        SELECT-->
<!--        psv.productId,-->
<!--        psv.productName,-->
<!--        psv.categoryName,-->
<!--        psv.topLevelCategoryName,-->
<!--        &#45;&#45; 요청된 월의 기초 재고를 `productinitstock`에서 조회 (startDate에 해당하는 값)-->
<!--        IFNULL(pis_monthly.initialStockQuantity, 0) AS initialStockQuantity,-->
<!--        IFNULL(pis_monthly.initialUnitPrice, 0) AS initialUnitPrice,-->
<!--        IFNULL((pis_monthly.initialStockQuantity * pis_monthly.initialUnitPrice), 0) AS totalInitialStockAmount,-->
<!--        &#45;&#45; 요청된 월의 입고 수량 및 금액 계산 (`purchaseOrder` 테이블 사용)-->
<!--        IFNULL(po_monthly.monthlyPurchaseQty, 0) AS purchaseQty,-->
<!--        IFNULL(po_monthly.monthlyPurchasePrice, 0) AS purchasePrice,-->
<!--        IFNULL(po_monthly.monthlyPurchaseAmount, 0) AS totalPurchase,-->
<!--        &#45;&#45; 요청된 월의 출고 수량 및 금액 계산 (`sale_product` 테이블 사용)-->
<!--        IFNULL(sp_monthly.monthlySaleQty, 0) AS saleQty,-->
<!--        IFNULL(sp_monthly.monthlySalePrice, 0) AS salePrice,-->
<!--        IFNULL(sp_monthly.monthlySaleAmount, 0) AS totalSale,-->
<!--        &#45;&#45; 기말 재고 수량 계산: 월별 기초 + 월별 입고 - 월별 출고-->
<!--        (-->
<!--        IFNULL(pis_monthly.initialStockQuantity, 0) +-->
<!--        IFNULL(po_monthly.monthlyPurchaseQty, 0) - -->
<!--        IFNULL(sp_monthly.monthlySaleQty, 0)-->
<!--        ) AS stockQuantity,-->
<!--        psv.price AS price, &#45;&#45; 상품의 현재 판매 가격을 기말 재고 단가로 사용-->
<!--        &#45;&#45; 기말 재고 금액 계산: 기말 재고 수량 * 현재 판매 가격-->
<!--        (-->
<!--        (IFNULL(pis_monthly.initialStockQuantity, 0) +-->
<!--        IFNULL(po_monthly.monthlyPurchaseQty, 0) - -->
<!--        IFNULL(sp_monthly.monthlySaleQty, 0)) * psv.price-->
<!--        ) AS stockAmount-->
<!--        FROM-->
<!--        erp_db.product_summary_view psv &#45;&#45; 기존 뷰를 기본 정보 가져오는 데 사용-->
<!--        LEFT JOIN-->
<!--        ( &#45;&#45; 월별 기초 재고 조회 서브쿼리-->
<!--        SELECT-->
<!--        productId,-->
<!--        initialStockQuantity,-->
<!--        initialUnitPrice-->
<!--        FROM-->
<!--        erp_db.productinitstock-->
<!--        WHERE-->
<!--        initialStockDate = #{startDate}-->
<!--        ) pis_monthly ON psv.productId = pis_monthly.productId-->
<!--        LEFT JOIN-->
<!--        ( &#45;&#45; 월별 입고 요약 서브쿼리 (orderStmt의 orderDate를 기준으로 필터링)-->
<!--        SELECT-->
<!--        po.productId,-->
<!--        SUM(po.purchaseQty) AS monthlyPurchaseQty,-->
<!--        &#45;&#45; 입고 단가는 해당 월의 평균 단가 또는 다른 기준을 사용할 수 있음.-->
<!--        &#45;&#45; 현재는 총 금액 / 총 수량으로 단순 계산 (0으로 나누는 오류 방지)-->
<!--        CASE-->
<!--        WHEN SUM(po.purchaseQty) > 0 THEN SUM(po.purchaseQty * po.purchasePrice) / SUM(po.purchaseQty)-->
<!--        ELSE 0-->
<!--        END AS monthlyPurchasePrice,-->
<!--        SUM(po.purchaseQty * po.purchasePrice) AS monthlyPurchaseAmount-->
<!--        FROM-->
<!--        erp_db.purchaseOrder po-->
<!--        JOIN-->
<!--        erp_db.orderStmt os ON po.orderId = os.orderId-->
<!--        WHERE-->
<!--        os.orderDate BETWEEN #{startDate} AND #{endDate}-->
<!--        GROUP BY po.productId-->
<!--        ) po_monthly ON psv.productId = po_monthly.productId-->
<!--        LEFT JOIN-->
<!--        ( &#45;&#45; 월별 출고 요약 서브쿼리 (sale의 saleDate를 기준으로 필터링)-->
<!--        SELECT-->
<!--        sp.productId,-->
<!--        SUM(sp.saleQty) AS monthlySaleQty,-->
<!--        &#45;&#45; 출고 단가도 위와 동일하게 계산-->
<!--        CASE-->
<!--        WHEN SUM(sp.saleQty) > 0 THEN SUM(sp.saleQty * sp.salePrice) / SUM(sp.saleQty)-->
<!--        ELSE 0-->
<!--        END AS monthlySalePrice,-->
<!--        SUM(sp.saleQty * sp.salePrice) AS monthlySaleAmount-->
<!--        FROM-->
<!--        erp_db.sale_product sp-->
<!--        JOIN-->
<!--        erp_db.sale s ON sp.saleId = s.saleId-->
<!--        WHERE-->
<!--        s.saleDate BETWEEN #{startDate} AND #{endDate}-->
<!--        GROUP BY sp.productId-->
<!--        ) sp_monthly ON psv.productId = sp_monthly.productId-->
<!--        <where>-->
<!--            <if test="productName != null and !productName.isEmpty()">-->
<!--                psv.productName LIKE CONCAT('%', #{productName}, '%')-->
<!--            </if>-->
<!--        </where>-->
<!--        ORDER BY-->
<!--        psv.topLevelCategoryName, psv.categoryName, psv.productName;-->
<!--    </select>-->

<!--    &lt;!&ndash;-->
<!--        재고 마감 처리 (productinitstock 테이블에 storeId가 없으므로 해당 컬럼 제거)-->
<!--        product 테이블의 stockQuantity와 price를 가져와 다음달 1일의 기초 재고로 저장합니다.-->
<!--        PRIMARY KEY (productId, initialStockDate) 충돌 시 UPDATE 진행.-->
<!--    &ndash;&gt;-->
<!--    <insert id="closeStock" parameterType="map">-->
<!--        INSERT INTO productinitstock (-->
<!--        productId,-->
<!--        initialStockQuantity,-->
<!--        initialUnitPrice,-->
<!--        initialStockDate-->
<!--        )-->
<!--        SELECT-->
<!--        productId,-->
<!--        stockQuantity,-->
<!--        price,-->
<!--        #{closeDate}-->
<!--        FROM product-->
<!--        ON DUPLICATE KEY UPDATE-->
<!--        initialStockQuantity = VALUES(initialStockQuantity),-->
<!--        initialUnitPrice = VALUES(initialUnitPrice);-->
<!--    </insert>-->


</mapper>
