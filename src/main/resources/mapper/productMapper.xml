<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Product">

    <resultMap id="productMap" type="map">
        <result property="productId" column="productId"/>
        <result property="productName" column="productName"/>
        <result property="price" column="price"/>
    </resultMap>

    <!-- clientId로 상품 조회 -->
    <select id="findByClientId" parameterType="int" resultType="map">
        SELECT
        p.productId AS "productId",
        p.price AS "price",
        p.productName AS "productName"
        FROM client_product cp
        JOIN product p ON cp.productId = p.productId
        WHERE cp.clientId = #{clientId}
        ORDER BY p.productName
    </select>

    <!-- 상품 삭제 -->
    <delete id="deleteProduct" parameterType="int">
        DELETE FROM product
        WHERE productId = #{id}
    </delete>

    <!-- 전체 상품 목록 -->
    <select id="getAllProducts" resultType="map">
        SELECT
        productId,
        productName,
        price
        FROM product
        ORDER BY productName ASC
    </select>

    <select id="selectProductsByCategoryId" parameterType="map" resultType="Product">
        SELECT
        p.*,
        cp.clientId AS clientId      <!-- 이 줄 중요 -->
        FROM product p
        LEFT JOIN client_product cp ON cp.productId = p.productId
        WHERE p.categoryId = #{categoryId}
        AND p.storeId   = #{storeId}
        AND p.productName LIKE #{keyword}
    </select>

    <select id="findProductList" resultType="Product">
        SELECT
        p.*,
        cp.clientId
        FROM
        product p
        LEFT JOIN
        client_product cp ON p.productId = cp.productId;
    </select>

    <update id="update" parameterType="Product">
        UPDATE product SET productName = #{productName}, price = #{price}, stockQuantity = #{stockQuantity}, categoryId = #{categoryId}
        WHERE productId = #{productId};
    </update>

    <insert id="add" parameterType="Product"
            useGeneratedKeys="true" keyProperty="productId">
        INSERT INTO product (categoryId, storeId, productName, price, stockQuantity)
        VALUES (#{categoryId}, #{storeId}, #{productName}, #{price}, #{stockQuantity});
    </insert>


    <select id="findProductByName" parameterType="String" resultType="Product">
        SELECT
        p.*,
        cp.clientId AS clientId
        FROM erp_db.product p
        LEFT JOIN erp_db.client_product cp ON p.productId = cp.productId
        WHERE p.productName LIKE #{productName}
    </select>

    <!-- 발주 카테고리별 상품 조회 young -->
    <select id="findTopCategoriesByClient" resultType="ProductCategory">
        SELECT DISTINCT pc.categoryId,
        pc.categoryName,
        pc.parentId,
        pc.categoryLevel
        FROM productCategory pc
        INNER JOIN product p ON p.categoryId = pc.categoryId
        INNER JOIN client c ON c.clientId = p.clientId
        WHERE pc.categoryLevel = 1
        AND c.clientId = #{clientId}
        ORDER BY pc.categoryName ASC
    </select>

    <select id="findSubCategoriesByParent" resultType="ProductCategory">
        SELECT DISTINCT pc.categoryId,
        pc.categoryName,
        pc.parentId,
        pc.categoryLevel
        FROM productCategory pc
        INNER JOIN product p ON p.categoryId = pc.categoryId
        INNER JOIN client c ON c.clientId = p.clientId
        WHERE pc.parentId = #{parentId}
        AND c.clientId = #{clientId}
        ORDER BY pc.categoryName ASC
    </select>

    <!-- 카테고리별 상품 조회 young -->
    <select id="findByCategoryId" parameterType="int" resultType="Product">
        SELECT
        p.productId       AS productId,
        p.productName     AS productName,
        p.price           AS price,
        p.stockQuantity   AS stockQuantity,
        p.categoryId      AS categoryId,
        cp.clientId       AS clientId
        FROM erp_db.product p
        LEFT JOIN erp_db.client_product cp ON cp.productId = p.productId
        WHERE p.categoryId = #{categoryId}
        ORDER BY p.productName
    </select>

    <select id="stockQuantityList" parameterType="int" resultType="StockQuantity">
        SELECT * FROM product_summary_view
        WHERE storeId = #{storeId};
    </select>


    <select id="findStockQuantityByKeyword" parameterType="map" resultType="StockQuantity">
        SELECT *
        FROM product_summary_view
        WHERE storeId = #{storeId}
        AND (topLevelCategoryName LIKE #{keyword}
        OR categoryName LIKE #{keyword}
        OR productName LIKE #{keyword})
    </select>

    <select id="findStockQuantityByKeywordAndMonth" parameterType="map" resultType="StockQuantity">
        SELECT *
        FROM product_summary_view
        WHERE productId IN (
        SELECT productId
        FROM productinitstock
        WHERE MONTH(initialStockDate) = #{month}
        )
        AND (storeId = #{storeId}
        AND (
        topLevelCategoryName LIKE CONCAT('%', #{keyword}, '%')
        OR categoryName LIKE CONCAT('%', #{keyword}, '%')
        OR productName LIKE CONCAT('%', #{keyword}, '%')
        ))
        ORDER BY productId ASC
    </select>

    <select id="findStockQuantityByMonth" parameterType="map" resultType="StockQuantity">
        SELECT *
        FROM product_summary_view
        WHERE (productId IN (
        SELECT productId
        FROM productinitstock
        WHERE MONTH(initialStockDate) = #{month}
        ))
        AND storeId = #{storeId}
        ORDER BY productId ASC
    </select>

    <insert id="addCategory" parameterType="Product">
        INSERT INTO product (storeId, categoryId, productName, price, stockQuantity)
        VALUES (#{storeId}, #{categoryId}, #{productName}, #{price}, #{stockQuantity});
    </insert>

    <!-- 카테고리ID로 상품 you -->
    <select id="findProductsByCategoryId" parameterType="int" resultType="Product">
        SELECT * FROM product WHERE categoryId = #{parentId};
    </select>

    <!-- 발주시 상품재고 증가 ho -->

    <update id="updateOrder" parameterType="map">
        UPDATE product SET stockQuantity = stockQuantity+#{purchaseQty}
        WHERE productId = #{productId};
    </update>


    <!-- 모달창 카테고리명 수정 you -->
    <update id="updateProductName" parameterType="map">
        UPDATE product
        SET productName = #{newName}
        WHERE productId = #{productId};
    </update>


    <!-- 판매시 상품재고 감소 ho -->
    <update id="updateSale" parameterType="map">
        UPDATE product SET stockQuantity = stockQuantity-#{qty}
        WHERE productId = #{productId};
    </update>


    <!-- 점포 아이디에 맞는 상품 가져오기 ho -->
    <select id="findProductSaleAll" parameterType="String" resultType="Product">
        SELECT * FROM product
        WHERE storeId = #{storeId}
    </select>

</mapper>
